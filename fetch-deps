#!/bin/bash

##############################################################################
##                                                                          ##
## Tool to fetch openhoi dependencies for *NIX                              ##
## !DO NOT RUN THIS SCRIPT AS ROOT!                                         ##
##                                                                          ##
##############################################################################




# Do some preparations...
if [[ $OSTYPE == "darwin"* ]]; then
    MACOS=true
    CHECKMARK="\xE2\x9C\x94"
    CROSSMARK="\xE2\x9C\x96"
    LINEBEG="\xE2\x98\x85"
elif (locale | grep -e 'utf8' -e 'UTF-8') >/dev/null 2>&1; then
    CHECKMARK="\u2714"
    CROSSMARK="\u2716"
    LINEBEG="\u2605"
else
    CHECKMARK="[Y]"
    CROSSMARK="[X]"
    LINEBEG="::"
fi
CHECKMARK="\e[1;32m$CHECKMARK\e[0m"
CROSSMARK="\e[1;91m$CROSSMARK\e[0m"
LINEBEG="\e[1;34m$LINEBEG\e[0m"
CWD=$PWD




# At first, ensure that we are not root as some commands we execute are not recommended
# to be called with root permissions
if [[ $(id -u) -eq 0 ]]; then
    printf " $CROSSMARK Please do not run this script with root permissions.\n"
    exit;
fi




# Then, check for the current OS type
# If we support it, we can also automatically download all required dependencies
printf "$LINEBEG Checking for operating system type...\n"

INSTALLSYSTEMS=(PACMAN APTGET HOMEBREW PKG)
isa=${#INSTALLSYSTEMS[@]}
for ((i=0; i < $isa; i++)); do
    ISE_NAME=${INSTALLSYSTEMS[i]}
    declare -r ${ISE_NAME}=$i
done

INSTALL_SNAPCRAFT=false
OGRE_MANUAL_BUILD=false
OGRE_CUSTOM_PACKAGE=false

if [ $OSTYPE == "linux-gnu" ]; then
    # Linux
    printf " $CHECKMARK Linux is supported, but we need to check for your installed distribution...\n"
    
    # Get current Linux distribution
    if [ -f /etc/arch-release ]; then
        DISTRO="arch"
    else
        DISTRO=$(lsb_release -is)
    fi
    DISTRO=${DISTRO,,} # Make distro name lower-case
    if [[ $DISTRO == "arch" ]]; then
        printf " $CHECKMARK Arch Linux is supported. Using \e[1mpacman\e[0m install system...\n"

        INSTALLSYSTEM=${INSTALLSYSTEMS[$PACMAN]}
        PACKAGES="base-devel git cmake pkgconf boost cgal openssl openal zlib sdl2 clang rapidjson lua"
        AUR_PACKAGES=("ogre")
    elif [ $DISTRO == "debian" ] || [ $DISTRO == "ubuntu" ]; then
        if [ $DISTRO == "ubuntu" ]; then
            printf " $CHECKMARK Ubuntu is supported. Using \e[1mapt-get\e[0m install system...\n"
        else
            printf " $CHECKMARK Debian is supported. Using \e[1mapt-get\e[0m install system...\n"
        fi

        #CODENAME=`lsb_release --codename | cut -f2`
        INSTALLSYSTEM=${INSTALLSYSTEMS[$APTGET]}
        PACKAGES="cmake git pkg-config build-essential uuid-dev libboost-all-dev libssl-dev libopenal-dev libcgal-dev libsdl2-dev clang-format snapd rapidjson-dev liblua5.3-dev"
        OGRE_CUSTOM_PACKAGE=true
        INSTALL_SNAPCRAFT=true
    else
        printf " $CROSSMARK Your distribution '$DISTRO' is not supported. Aborting. \e[91mYou may have to install all dependencies manually.\e[0m\n"
        exit 1 
    fi
elif [[ $MACOS == true ]]; then
    printf " $CHECKMARK macOS is supported.\n"
    
    INSTALLSYSTEM=${INSTALLSYSTEMS[$HOMEBREW]}
    PACKAGES=(cmake boost cgal zlib openssl openal-soft freeimage freetype sdl2 clang-format rapidjson lua)
    OGRE_MANUAL_BUILD=true
else
    printf " $CROSSMARK Your OS '$OSTYPE' is not supported. Aborting. \e[91mYou may have to install all dependencies manually.\e[0m\n"
    exit 1 
fi




# Cleanup and sync submodules
source thirdparty/ogre-package/version
if [ ! -d thirdparty/ogre-package/ogre/Components/Overlay/src/imgui ]; then
    rm -R thirdparty/ogre-package/ogre/Components/Overlay/src/imgui
fi
git submodule sync
git submodule update --init --recursive --remote
git -C thirdparty/ogre-package/imgui reset --hard
git -C thirdparty/ogre-package/imgui pull --rebase origin docking
git -C thirdparty/ogre-package/ogre reset --hard v$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH




# Install all required packages...
if [ $INSTALLSYSTEM ]; then
    printf "$LINEBEG Installing required packages...\n"

    if [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$PACMAN]} ]; then
        sudo pacman -Syu --noconfirm
        sudo pacman -S $PACKAGES --noconfirm --needed

        if [ $AUR_PACKAGES ]; then
            mkdir --parents build/pacman_aur
            for i in "${AUR_PACKAGES[@]}"
            do
                if [ ! -d "tmp/$i" ]; then
                    git clone https://aur.archlinux.org/$i.git build/pacman_aur/$i
                else
                    git -C build/pacman_aur/$i pull
                fi
                pushd build/pacman_aur/$i
                rm *.pkg.tar.xz
                makepkg -Acs --noconfirm --needed
                popd >/dev/null
                sudo pacman -U $(ls build/pacman_aur/$i/*.pkg.tar.xz | head -1) --noconfirm
            done
        fi
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$APTGET]} ]; then
        sudo apt-get update -qy
        sudo apt-get upgrade -qy
        sudo apt-get install -qy --no-install-recommends $PACKAGES
	    sudo apt-get clean
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$PKG]} ]; then
        sudo freebsd-update fetch --not-running-from-cron
        sudo freebsd-update install --not-running-from-cron
        env ASSUME_ALWAYS_YES=YES pkg bootstrap
        sudo pkg -N install $PACKAGES
    elif [ $INSTALLSYSTEM == ${INSTALLSYSTEMS[$HOMEBREW]} ]; then
        command -v brew >/dev/null 2>&1 || { /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; }
        for i in "${PACKAGES[@]}"
        do
            brew ls --versions $i && brew upgrade $i || brew install $i
        done
    fi

    if [ $INSTALL_SNAPCRAFT = true ]; then
        command -v snapcraft >/dev/null 2>&1 || { sudo snap install --classic snapcraft; }
    fi

    if [ $OGRE_MANUAL_BUILD = true ]; then
        printf "$LINEBG Building OGRE...\n"
        cd $CWD/thirdparty/ogre-package
        source package y # y = "Build only"
        cd $CWD
    elif [ $OGRE_CUSTOM_PACKAGE = true ]; then
        if [ $OSTYPE == "linux-gnu" ]; then
            if [ $DISTRO == "debian" ]; then
                # TODO: DEB
                TODO="1"
            elif [ $DISTRO == "ubuntu" ]; then
                # TODO: PPA
                TODO="1"
            else
                printf " $CROSSMARK Your Linux distro '$DISTRO' is not supported. Aborting. \e[91mYou may have to install all dependencies manually.\e[0m\n" 
            fi
        else
            printf " $CROSSMARK Your OS '$OSTYPE' is not supported. Aborting. \e[91mYou may have to install all dependencies manually.\e[0m\n"
            exit 1 
        fi
    fi
    
    printf " $CHECKMARK Finished! Please check the above command line output in order to verify that everything was okay.\n"
fi

cd $CWD


# Cleanup
rm -R thirdparty/ogre-package/ogre/Components/Overlay/src/imgui
git -C thirdparty/ogre-package/imgui reset --hard
git -C thirdparty/ogre-package/imgui pull --rebase origin docking
git -C thirdparty/ogre-package/ogre reset --hard v$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH